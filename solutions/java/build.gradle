buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.21.0'
}

apply from: 'docker/docker.gradle'

repositories {
    jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9

test {
    useJUnitPlatform()
}

ext {
    lombokVersion = '1.18.8'
    junitVersion = '5.4.2'
    springBootVersion = '2.1.4.RELEASE'
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    compileOnly(
            "org.projectlombok:lombok:$lombokVersion",
    )

    implementation(
            'org.apache.commons:commons-lang3:3.9',
            'com.google.guava:guava:27.1-jre',
            'com.alibaba:fastjson:1.2.58',
            'cglib:cglib-full:2.0.2',
            'guru.nidi:graphviz-java:0.8.5',
            'com.rabbitmq:amqp-client:5.7.0',
            'com.rabbitmq:http-client:3.2.0.RELEASE',
            'org.apache.httpcomponents:httpclient:4.5.8',
            'io.lettuce:lettuce-core:5.1.6.RELEASE',
            'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.0.1',
            "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-aop:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
    )

    runtimeOnly(
            'com.h2database:h2:1.4.199',
    )

    testImplementation(
            'org.assertj:assertj-core:3.12.2',
            'org.awaitility:awaitility:3.1.6',
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
    )

    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
    )
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
