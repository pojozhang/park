buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.13.4'
    }
}

apply plugin: com.avast.gradle.dockercompose.DockerComposePlugin

dockerCompose {
    captureContainersOutput = true
}

def services = []

fileTree(buildscript.sourceFile.parent).matching { include 'docker-compose-**.yml' }.visit {
    services += it.name.substring(it.name.lastIndexOf('-') + 1, it.name.lastIndexOf('.'))
}

services.each { service ->
    dockerCompose {
        "$service" {
            useComposeFiles = ["${buildscript.sourceFile.parent}${File.separator}docker-compose-${service}.yml"]
        }
    }
}

task allComposeUp(group: 'docker') {
    services.each { service ->
        dependsOn += "${service}ComposeUp"
    }
}

task allComposeDown(group: 'docker') {
    services.each { service ->
        dependsOn += "${service}ComposeDown"
    }
}

shardingproxyComposeUp.mustRunAfter(mysqlComposeUp)
mysqlComposeDown.mustRunAfter(shardingproxyComposeDown)
